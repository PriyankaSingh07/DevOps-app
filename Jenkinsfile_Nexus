pipeline {

 environment {
  NEXUS_VERSION = "nexus3"
  NEXUS_PROTOCOL = "http"
  NEXUS_URL = "10.73.123.210:8081"
  NEXUS_REPOSITORY = "maven-snapshots"
  NEXUS_CREDENTIAL_ID = "nexus-credentials"
 }
    agent {
        kubernetes {
            customWorkspace '/home/jenkins/agent/workspace/DevOps'
            label 'CI'
            defaultContainer 'jnlp'
            yamlFile 'k8sworkerpod.yml'
        }
    }
stages {
    stage('Deploy Artifact To Nexus') {
     steps {
        echo " Working outside"
        container('maven') {
          echo " Working inside the maven container"
		  script {
			unstash 'pom'
			unstash 'artifact'
			// Read POM xml file using 'readMavenPom' step , this step 'readMavenPom' is included in: https://plugins.jenkins.io/pipeline-utility-steps
			pom = readMavenPom file: "pom.xml";
			// Find built artifact under target folder
			filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
			// Print some info from the artifact found
			echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
			// Extract the path from the File found
			artifactPath = filesByGlob[0].path;
			// Assign to a boolean response verifying If the artifact name exists
			artifactExists = fileExists artifactPath;
			 if (artifactExists) {
			nexusArtifactUploader(
			nexusVersion: NEXUS_VERSION,
			protocol: NEXUS_PROTOCOL,
			nexusUrl: NEXUS_URL,
			groupId: pom.groupId,
			version: pom.version,
			repository: NEXUS_REPOSITORY,
			credentialsId: NEXUS_CREDENTIAL_ID,
			artifacts: [
			// Artifact generated such as .jar, .ear and .war files.
			[artifactId: pom.artifactId,
			classifier: '',
			file: artifactPath,
			type: pom.packaging
			],
			// Lets upload the pom.xml file for additional information for Transitive dependencies
			[artifactId: pom.artifactId,
			classifier: '',
			file: "pom.xml",
			type: "pom"
			]
		]
      )
     } 	else {
			error "*** File: ${artifactPath}, could not be found";
     }
    }
   }
  } 
 }
}
}
